// <auto-generated />
using EE.Education.Site.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace EE.Education.Site.Migrations
{
    [DbContext(typeof(EducationContext))]
    partial class EducationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("education")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("EE.Education.Site.EF.Entities.CourseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("EE.Education.Site.EF.Entities.Events.EventEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Events");

                    b.HasDiscriminator<string>("Discriminator").HasValue("EventEntity");
                });

            modelBuilder.Entity("EE.Education.Site.EF.Entities.Events.TaskEventDetailsEntity", b =>
                {
                    b.Property<int>("EventId");

                    b.Property<DateTime?>("DecisionDate");

                    b.Property<string>("Description");

                    b.Property<string>("Link")
                        .IsRequired();

                    b.Property<int?>("ResultId");

                    b.Property<int>("TaskId");

                    b.HasKey("EventId");

                    b.HasIndex("ResultId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskEventDetailsEntity");
                });

            modelBuilder.Entity("EE.Education.Site.EF.Entities.Events.TaskEventResultEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime>("Date");

                    b.Property<int>("PointCount");

                    b.HasKey("Id");

                    b.ToTable("TaskEventResultEntity");
                });

            modelBuilder.Entity("EE.Education.Site.EF.Entities.StudentLink", b =>
                {
                    b.Property<int>("CourseId");

                    b.Property<int>("StudentId");

                    b.HasKey("CourseId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentLink");
                });

            modelBuilder.Entity("EE.Education.Site.EF.Entities.TaskEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Cost");

                    b.Property<DateTime?>("Deadline");

                    b.Property<string>("Description");

                    b.Property<int>("GroupId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("EE.Education.Site.EF.Entities.TaskGroupEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CourseId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("TaskGroups");
                });

            modelBuilder.Entity("EE.Education.Site.EF.Entities.TeacherLink", b =>
                {
                    b.Property<int>("CourseId");

                    b.Property<int>("TeacherId");

                    b.HasKey("CourseId", "TeacherId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherLink");
                });

            modelBuilder.Entity("EE.Education.Site.EF.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("Hash");

                    b.Property<bool>("IsTeacher");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("MiddleName");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EE.Education.Site.EF.Entities.Events.TaskEventEntity", b =>
                {
                    b.HasBaseType("EE.Education.Site.EF.Entities.Events.EventEntity");


                    b.ToTable("TaskEventEntity");

                    b.HasDiscriminator().HasValue("TaskEventEntity");
                });

            modelBuilder.Entity("EE.Education.Site.EF.Entities.Events.EventEntity", b =>
                {
                    b.HasOne("EE.Education.Site.EF.Entities.UserEntity", "User")
                        .WithMany("Events")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EE.Education.Site.EF.Entities.Events.TaskEventDetailsEntity", b =>
                {
                    b.HasOne("EE.Education.Site.EF.Entities.Events.TaskEventEntity", "Event")
                        .WithOne("Details")
                        .HasForeignKey("EE.Education.Site.EF.Entities.Events.TaskEventDetailsEntity", "EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EE.Education.Site.EF.Entities.Events.TaskEventResultEntity", "Result")
                        .WithMany()
                        .HasForeignKey("ResultId");

                    b.HasOne("EE.Education.Site.EF.Entities.TaskEntity", "Task")
                        .WithMany("TaskEvents")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EE.Education.Site.EF.Entities.StudentLink", b =>
                {
                    b.HasOne("EE.Education.Site.EF.Entities.CourseEntity", "Course")
                        .WithMany("Students")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EE.Education.Site.EF.Entities.UserEntity", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EE.Education.Site.EF.Entities.TaskEntity", b =>
                {
                    b.HasOne("EE.Education.Site.EF.Entities.TaskGroupEntity", "Group")
                        .WithMany("Tasks")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EE.Education.Site.EF.Entities.TaskGroupEntity", b =>
                {
                    b.HasOne("EE.Education.Site.EF.Entities.CourseEntity", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EE.Education.Site.EF.Entities.TeacherLink", b =>
                {
                    b.HasOne("EE.Education.Site.EF.Entities.CourseEntity", "Course")
                        .WithMany("Teachers")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EE.Education.Site.EF.Entities.UserEntity", "Teacher")
                        .WithMany("TeacherCourses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
